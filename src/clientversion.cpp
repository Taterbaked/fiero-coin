using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Bitcoin
{
    public static class ClientVersion
    {
        public const string CLIENT_NAME = "Satoshi";

        private static string BUILD_DESC;
        private static string BUILD_SUFFIX;

        static ClientVersion()
        {
            // The <bitcoin-build-info.h>, which is generated by the build environment (cmake/script/GenerateBuildInfo.cmake),
            // could contain only one line of the following:
            //   - "#define BUILD_GIT_TAG ...", if the top commit is tagged
            //   - "#define BUILD_GIT_COMMIT ...", if the top commit is not tagged
            //   - "// No build information available", if proper git information is not available

            // git will put "#define GIT_COMMIT_ID ..." on the next line inside archives. $Format:%n#define GIT_COMMIT_ID "%H"$

            #if BUILD_GIT_TAG
                BUILD_DESC = BUILD_GIT_TAG;
                BUILD_SUFFIX = "";
            #else
                BUILD_DESC = "v" + PACKAGE_VERSION;
                #if CLIENT_VERSION_IS_RELEASE
                    BUILD_SUFFIX = "";
                #elif BUILD_GIT_COMMIT
                    BUILD_SUFFIX = "-" + BUILD_GIT_COMMIT;
                #elif GIT_COMMIT_ID
                    BUILD_SUFFIX = "-g" + GIT_COMMIT_ID;
                #else
                    BUILD_SUFFIX = "-unk";
                #endif
            #endif
        }

        private static string FormatVersion(int nVersion)
        {
            return string.Format("{0}.{1}.{2}", nVersion / 10000, (nVersion / 100) % 100, nVersion % 100);
        }

        public static string FormatFullVersion()
        {
            return BUILD_DESC + BUILD_SUFFIX;
        }

        public static string FormatSubVersion(string name, int nClientVersion, List<string> comments)
        {
            string commentsStr = comments.Count > 0 ? string.Format("({0})", string.Join("; ", comments)) : "";
            return string.Format("/{0}:{1}{2}/", name, FormatVersion(nClientVersion), commentsStr);
        }

        public static string CopyrightHolders(string strPrefix)
        {
            string copyrightDevs = string.Format(COPYRIGHT_HOLDERS, COPYRIGHT_HOLDERS_SUBSTITUTION);
            string strCopyrightHolders = strPrefix + copyrightDevs;

            // Make sure Bitcoin Core copyright is not removed by accident
            if (!copyrightDevs.Contains("Bitcoin Core"))
            {
                strCopyrightHolders += "\n" + strPrefix + "The Bitcoin Core developers";
            }
            return strCopyrightHolders;
        }

        public static string LicenseInfo()
        {
            const string URL_SOURCE_CODE = "<https://github.com/bitcoin/bitcoin>";

            return CopyrightHolders(string.Format("Copyright (C) {0}-{1} ", 2009, COPYRIGHT_YEAR)) + "\n" +
                   "\n" +
                   string.Format("Please contribute if you find {0} useful. Visit {1} for further information about the software.", PACKAGE_NAME, "<" + PACKAGE_URL + ">") +
                   "\n" +
                   string.Format("The source code is available from {0}.", URL_SOURCE_CODE) +
                   "\n" +
                   "\n" +
                   "This is experimental software.\n" +
                   string.Format("Distributed under the MIT software license, see the accompanying file {0} or {1}", "COPYING", "<https://opensource.org/licenses/MIT>") +
                   "\n";
        }
    }
}
